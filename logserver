#!/usr/bin/python3
import socket
import hashlib
import base64
import datetime
import os
import sys

def val_proof_of_work(message):
    hash_bytes = hashlib.sha256(message.encode('utf-8')).digest()
    val = int.from_bytes(hash_bytes[:3], byteorder='big')
    return val < 4

def generate_hash(message):
    hash_bytes = hashlib.sha256(message.encode('utf-8')).digest()
    base64_hash = base64.b64encode(hash_bytes).decode('utf-8')
    return base64_hash[-24:]

def handle_client(client_socket):
    try:
        # Use socket file interface to read line by line
        with client_socket.makefile('r') as client_in, client_socket.makefile('w') as client_out:
            # Receive the string from the client (terminated by a newline)
            message = client_in.readline().strip()
            print(f"Received: {message}")


            ########## YOUR CODE HERE ############
            ### Validate the the PoW in the message
            ### Stril the PoW from the message
            ### Read the last hash from loghead.txt
            ### Create the full line for the log entry
            ### Compute its hash
            ### Append the line to the log
            ### Update loghead.txt
            ### Add error checking
            #######################################
            if not val_proof_of_work(message):
                response = "error: invalid proof of work\n"
                client_out.write(response)
                client_out.flush()
                return

            if ':' not in message:
                response = "error: missing proof of work separator\n"
                client_out.write(response)
                client_out.flush()
                return
            
            #strip proof of work
            _, user_message = message.split(':', 1)

            #replace : with >
            processed_message = '>' + user_message

            #timestamp
            timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            #check log file
            log_exists = os.path.exists('log.txt')
            head_exists = os.path.exists('loghead.txt')

            #handle missing files
            if not log_exists:
                # Create new log file and ignore loghead.txt
                previous_hash = "start"
                
                # Create log entry
                log_entry = f"{timestamp} - {previous_hash} {processed_message}"
                
                # Append to log file
                with open('log.txt', 'w') as log_file:
                    log_file.write(log_entry + '\n')
                
                # Compute and store the head hash
                head_hash = generate_hash(log_entry)
                with open('loghead.txt', 'w') as head_file:
                    head_file.write(head_hash)
                    
                response = "ok\n"
            elif not head_exists:
                # Log file exists but head file is missing
                response = "error: head pointer file is missing\n"
            else:
                # Both files exist
                try:
                    # Read the previous hash from loghead.txt
                    with open('loghead.txt', 'r') as head_file:
                        previous_hash = head_file.read().strip()
                    
                    # Create log entry
                    log_entry = f"{timestamp} - {previous_hash} {processed_message}"
                    
                    # Append to log file
                    with open('log.txt', 'a') as log_file:
                        log_file.write(log_entry + '\n')
                    
                    # Compute and store the new head hash
                    head_hash = generate_hash(log_entry)
                    with open('loghead.txt', 'w') as head_file:
                        head_file.write(head_hash)
                        
                    response = "ok\n"
                except Exception as e:
                    response = f"error: {str(e)}\n"

            # Send a response message back to the client (terminated by a newline)
            response = "ok\n"
            client_out.write(response)
            client_out.flush()

    except Exception as e:
        print(f"logserver: {e}")
    finally:
        client_socket.close()

def start_server():
    # Create a socket and bind it to any available port
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('0.0.0.0', 0))  # Bind to any available port
    server_socket.listen(5)

    # Get the port number and print it
    port = server_socket.getsockname()[1]
    print(f"Server listening on port {port}")

    # Continuously accept and handle clients
    while True:
        client_socket, addr = server_socket.accept()
        print(f"Accepted connection from {addr}")
        handle_client(client_socket)

if __name__ == "__main__":
    start_server()

